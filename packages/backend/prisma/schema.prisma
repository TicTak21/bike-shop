generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Categories {
  categoryId     String           @id @default(uuid())
  name           String           @unique @db.VarChar(100)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime?        @updatedAt
  urlSlug        String?          @db.VarChar(100)
  description    String?          @db.Text
  sabcategoryId  String           @default(uuid())
  categoryImages CategoryImages[]
  products       Products[]
  subcategories  Subcategories[]
}

model CategoryImages {
  categoryImageId String     @id @default(uuid())
  createdAt       DateTime   @default(now())
  updatedAt       DateTime?  @updatedAt
  image           Bytes?
  categoryId      String     @default(uuid())
  categories      Categories @relation(fields: [categoryId], references: [categoryId])

  @@index([categoryId], name: "fk_category_images_categories1_idx")
}

model Orders {
  orderId    String    @id @default(uuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
  totalPrice Float?    @default(0) @db.Float
  users      Users[]
}

model Products {
  productId     String          @id @default(uuid())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime?       @updatedAt
  name          String          @db.VarChar(255)
  price         Float?          @default(0) @db.Float
  description   String?         @db.Text
  urlSlug       String?         @db.VarChar(100)
  categoryId    String          @default(uuid())
  subcategoryId String          @default(uuid())
  categories    Categories      @relation(fields: [categoryId], references: [categoryId])
  subcategories Subcategories   @relation(fields: [subcategoryId], references: [subcategoryId])
  productImages ProductImages[]

  @@index([categoryId], name: "fk_products_categories1_idx")
  @@index([subcategoryId], name: "fk_products_subcategories1_idx")
}

model ProductImages {
  productImageId String    @id @default(uuid())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime? @updatedAt
  image          Bytes?
  productId      String    @default(uuid())
  products       Products  @relation(fields: [productId], references: [productId])

  @@index([productId], name: "fk_product_images_products1_idx")
}

model Subcategories {
  subcategoryId     String              @id @default(uuid())
  createdAt         DateTime            @default(now())
  updatedAt         DateTime?           @updatedAt
  name              String              @db.VarChar(100)
  urlSlug           String?             @db.VarChar(100)
  description       String?             @db.Text
  parentCategoryId  String              @default(uuid())
  categories        Categories          @relation(fields: [parentCategoryId], references: [categoryId])
  products          Products[]
  subcategoryImages SubcategoryImages[]

  @@index([parentCategoryId], name: "fk_subcategories_categories1_idx")
}

model SubcategoryImages {
  subcategoryImageId String        @id @default(uuid())
  createdAt          DateTime      @default(now())
  updatedAt          DateTime?     @updatedAt
  image              Bytes?
  subcategoryId      String        @default(uuid())
  subcategories      Subcategories @relation(fields: [subcategoryId], references: [subcategoryId])

  @@index([subcategoryId], name: "fk_subcategory_images_subcategories1_idx")
}

model Users {
  userId        String       @id @default(uuid())
  username      String?      @db.VarChar(16)
  email         String       @unique @db.VarChar(100)
  password_hash String       @db.VarChar(100)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime?    @updatedAt
  role          String       @db.VarChar(20)
  orderId       String       @default(uuid())
  orders        Orders       @relation(fields: [orderId], references: [orderId])
  userImages    UserImages[]

  @@index([orderId], name: "fk_users_orders_idx")
}

model UserImages {
  user_image_id String    @id @default(uuid())
  image         String?   @db.VarChar(45)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
  userId        String    @default(uuid())
  users         Users     @relation(fields: [userId], references: [userId])

  @@index([userId], name: "fk_user_images_users1_idx")
}
