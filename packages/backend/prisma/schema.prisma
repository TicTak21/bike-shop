generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  categoryId     String          @id @default(uuid())
  name           String          @unique @db.VarChar(100)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime?       @updatedAt
  urlSlug        String?         @db.VarChar(100)
  description    String?         @db.Text
  sabcategoryId  String          @default(uuid())
  categoryImages CategoryImage[]
  products       Product[]
  subcategories  Subcategory[]
}

model CategoryImage {
  categoryImageId String    @id @default(uuid())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @updatedAt
  image           String
  categoryId      String    @default(uuid())
  category        Category  @relation(fields: [categoryId], references: [categoryId])

  @@index([categoryId], name: "fk_category_images_categories1_idx")
}

model Order {
  orderId    String    @id @default(uuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
  totalPrice Float?    @default(0) @db.Float
  users      User[]
}

model UserToken {
  tokenId   String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  token     String    @db.VarChar(255)
  userIp    String    @db.VarChar(255)
  userAgent String    @db.VarChar(255)
  expires   BigInt    @db.BigInt
  userId    String    @default(uuid())
  user      User      @relation(fields: [userId], references: [userId])

  @@index([userId], name: "fk_user_token_users1_idx")
}

model Product {
  productId     String         @id @default(uuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime?      @updatedAt
  name          String         @db.VarChar(255)
  price         Float?         @default(0) @db.Float
  description   String?        @db.Text
  urlSlug       String?        @db.VarChar(100)
  views         Int            @default(0) @db.MediumInt
  rating        Int            @default(0) @db.MediumInt
  categoryId    String         @default(uuid())
  subcategoryId String         @default(uuid())
  categories    Category       @relation(fields: [categoryId], references: [categoryId])
  subcategory   Subcategory    @relation(fields: [subcategoryId], references: [subcategoryId])
  productImages ProductImage[]

  @@index([categoryId], name: "fk_products_categories1_idx")
  @@index([subcategoryId], name: "fk_products_subcategories1_idx")
}

model ProductImage {
  productImageId String    @id @default(uuid())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime? @updatedAt
  image          String
  productId      String    @default(uuid())
  product        Product   @relation(fields: [productId], references: [productId])

  @@index([productId], name: "fk_product_images_products1_idx")
}

model Subcategory {
  subcategoryId     String             @id @default(uuid())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime?          @updatedAt
  name              String             @unique @db.VarChar(100)
  urlSlug           String?            @db.VarChar(100)
  description       String?            @db.Text
  parentCategoryId  String             @default(uuid())
  categories        Category           @relation(fields: [parentCategoryId], references: [categoryId])
  products          Product[]
  subcategoryImages SubcategoryImage[]

  @@index([parentCategoryId], name: "fk_subcategories_categories1_idx")
}

model SubcategoryImage {
  subcategoryImageId String      @id @default(uuid())
  createdAt          DateTime    @default(now())
  updatedAt          DateTime?   @updatedAt
  image              String
  subcategoryId      String      @default(uuid())
  subcategory        Subcategory @relation(fields: [subcategoryId], references: [subcategoryId])

  @@index([subcategoryId], name: "fk_subcategory_images_subcategories1_idx")
}

model User {
  userId        String      @id @default(uuid())
  username      String?     @db.VarChar(16)
  email         String      @unique @db.VarChar(100)
  password_hash String      @db.VarChar(100)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime?   @updatedAt
  role          String      @db.VarChar(20)
  orderId       String      @default(uuid())
  order         Order       @relation(fields: [orderId], references: [orderId])
  userImages    UserImage[]
  userToken     UserToken?

  @@index([orderId], name: "fk_users_orders_idx")
}

model UserImage {
  user_image_id String    @id @default(uuid())
  image         String?   @db.VarChar(45)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
  userId        String    @default(uuid())
  user          User      @relation(fields: [userId], references: [userId])

  @@index([userId], name: "fk_user_images_users1_idx")
}
